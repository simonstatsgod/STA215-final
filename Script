## Project:  STA 215, Fall 2024, Final Project
# Located:   R Studio
# File Name: Song
# Date:      2024_11_25
# Who:       Simon Colon

## Load packages
# NOTE: Run base.R if these commands return an error!
library(readr)
library(dplyr)
library(tidytext)
library(tidyverse)
library(ggplot2)
library(haven)
library(forcats)
library(psych)  # Only load once!

# Load data 
library(readr)
raw_data <- read_csv("raw_data.csv")
View(raw_data)

##################################################################################
############### Table 1: Descriptive statistics    ####################   
##################################################################################
# Descriptive statistics using summary() for all variables
summary(raw_data)

# Alternatively, use the describe() function from the psych package for a more detailed summary
describe(raw_data)

# If you prefer specific statistics (mean, sd) for key variables (streams and bpm), you can do the following:
mean_bpm <- mean(raw_data$bpm)  # Calculate the mean bpm
sd_bpm <- sd(raw_data$bpm)      # Calculate the standard deviation for bpm

mean_streams <- mean(raw_data$streams)  # Calculate the mean streams
sd_streams <- sd(raw_data$streams)      # Calculate the standard deviation for streams

# Output to check the means and standard deviations for bpm and streams
cat("Mean BPM: ", mean_bpm, "\n")
cat("SD BPM: ", sd_bpm, "\n")
cat("Mean Streams: ", mean_streams, "\n")
cat("SD Streams: ", sd_streams, "\n")

##################################################################################
#################### Update Factor Levels for Key Signature ######################
##################################################################################

# Relabel factor levels for 'key' to include flat symbols
raw_data$key <- fct_recode(as.factor(raw_data$key),
                           "C" = "C",
                           "D♭" = "Db",
                           "D" = "D",
                           "E♭" = "Eb",
                           "E" = "E",
                           "F" = "F",
                           "G♭" = "Gb",
                           "G" = "G",
                           "A♭" = "Ab",
                           "A" = "A",
                           "B♭" = "Bb",
                           "B" = "B")

##################################################################################
#################### Figure 1: Boxplot of Song Length by Key #####################
##################################################################################

# Boxplot with updated key signature labels
boxplot(song_length ~ key, 
        data = raw_data, 
        xlab = "Key Signature", 
        ylab = "Song Length (seconds)", 
        main = "Figure 1: Song Length vs Key Signature",
        col = "lightblue")  # Add color for aesthetics

# Summarize and analyze relationships between song length and key
model <- aov(song_length ~ key, data = raw_data)
summary(model)  # Output ANOVA table for interpretation

##################################################################################
#################### Figure 2: Scatter Plot of Song Length vs Streams ############
##################################################################################

# Log-transform the 'streams' variable for better visualization
raw_data$lnstreams <- log(raw_data$streams)

# Create the scatter plot
plot(
  raw_data$song_length, 
  raw_data$lnstreams, 
  xlab = "Song Length (seconds)",  # Clear and descriptive X-axis label
  ylab = "Log of Streams",         # Clear and descriptive Y-axis label
  main = "Figure 1: Scatterplot of Relationship between Song Length vs Log of Streams",  # Updated title for clarity
  pch = 16,  # Use filled circles for points
  col = "blue"  # Set points to blue for better visibility
)

# Add mean lines for both axes
abline(h = mean(raw_data$lnstreams, na.rm = TRUE), col = "black", lty = 2)  # Horizontal mean line
abline(v = mean(raw_data$song_length, na.rm = TRUE), col = "black", lty = 2)  # Vertical mean line

# Fit a linear model using the log-transformed 'streams'
linear_relationship <- lm(lnstreams ~ song_length, data = raw_data)

# Output a summary of the linear model
summary(linear_relationship)

# Add the regression line to the plot
abline(linear_relationship, col = "red", lwd = 2)  # Regression line in red

# Add a legend for clarity
legend(
  "topright", 
  legend = c("Mean Lines", "Regression Line"), 
  col = c("black", "red"), 
  lty = c(2, 1), 
  lwd = c(1, 2), 
  bty = "n"  # Remove the box around the legend
)

##################################################################################
#################### Figure 3: Residual Plot of Song Length vs Streams ##########
##################################################################################

# Fit the linear regression model (from Figure 2) using the original, untransformed streams variable
linear_relationship <- lm(streams ~ song_length, data = raw_data)

# Extract the residuals from the model
residuals <- resid(linear_relationship)

# Scale the residuals to make them smaller (e.g., in millions)
residuals_scaled <- residuals / 1e6  # Divide by 1,000,000 to scale the residuals

# Create the residual plot
plot(
  raw_data$song_length,  # X-axis: predictor (independent variable)
  residuals_scaled,      # Y-axis: scaled residuals
  xlab = "Song Length (seconds)",  # Label for the X-axis
  ylab = "Residuals (millions)",   # Label for the Y-axis
  main = "Figure 2: Scatter Plot of Song Length and Residuals from Regression Analysis",  # Title for the plot
  pch = 16,              # Use filled circles for points
  col = "darkgreen",     # Color of the points
  xaxt = "n",            # Remove the default X-axis
  yaxt = "n"             # Remove the default Y-axis
)

# Add a horizontal line at the mean of the scaled residuals (which should ideally be zero)
abline(h = mean(residuals_scaled), col = "red", lty = 2, lwd = 2)  # Red dashed line

# Optionally, add a vertical line at the mean of the song length
abline(v = mean(raw_data$song_length), col = "blue", lty = 2, lwd = 2)  # Blue dashed line for song length

# Adjust the Y-axis to show scaled residuals as whole numbers in a readable format
axis(2, at = pretty(residuals_scaled), labels = scales::comma(pretty(residuals_scaled)))

# Adjust the X-axis to show song length in a readable format
axis(1, at = pretty(raw_data$song_length), labels = scales::comma(pretty(raw_data$song_length)))

##################################################################################
####################  Table 2: Contingency Table             ####################   
##################################################################################

# Create a contingency table between two categorical variables (e.g., artist and producer)
contingency_table <- table(raw_data$artist, raw_data$producer)

# View the contingency table
print(contingency_table)

# Perform Chi-square test on the contingency table
chisq_test <- chisq.test(contingency_table)

# Output the results of the Chi-square test
print(chisq_test)

# Chi-square interpretation:
cat("Chi-Square Test Interpretation:\n")
cat("Chi-Square Statistic: ", chisq_test$statistic, "\n")
cat("Degrees of Freedom: ", chisq_test$parameter, "\n")
cat("P-Value: ", chisq_test$p.value, "\n")

# If you want to show the expected counts alongside the observed, you can use the following:
cat("Expected Counts:\n")
print(chisq_test$expected)

# For a clearer, formatted table, use the xtable package (if desired)
# You can format the contingency table into a nice LaTeX or HTML format with xtable
library(xtable)
print(xtable(contingency_table), type = "html")  # You can change the type to "latex" if needed
##################################################################################
####################  Calculating Values  ########################################   
##################################################################################
# Calculate mean, standard deviation, maximum, and minimum for song length
mean_song_length <- mean(raw_data$song_length)
sd_song_length <- sd(raw_data$song_length)
max_song_length <- max(raw_data$song_length)
min_song_length <- min(raw_data$song_length)

# Output the results
cat("Mean Song Length (seconds): ", mean_song_length, "\n")
cat("Standard Deviation of Song Length (seconds): ", sd_song_length, "\n")
cat("Maximum Song Length (seconds): ", max_song_length, "\n")
cat("Minimum Song Length (seconds): ", min_song_length, "\n")
######
# Calculate mean, standard deviation, maximum, and minimum for lnstreams (log-transformed streams)
mean_lnstreams <- mean(raw_data$lnstreams, na.rm = TRUE)
sd_lnstreams <- sd(raw_data$lnstreams, na.rm = TRUE)
max_lnstreams <- max(raw_data$lnstreams, na.rm = TRUE)
min_lnstreams <- min(raw_data$lnstreams, na.rm = TRUE)

# Output the results for lnstreams (log-transformed streams)
cat("Mean Log-Transformed Streams: ", mean_lnstreams, "\n")
cat("Standard Deviation of Log-Transformed Streams: ", sd_lnstreams, "\n")
cat("Maximum Log-Transformed Streams: ", max_lnstreams, "\n")
cat("Minimum Log-Transformed Streams: ", min_lnstreams, "\n")
##################################################################################
####################  lnstreams values     #######################################   
##################################################################################
# Example lnstreams values
lnstreams_values <- c(19.92042, 1.324763, 13.90725, 22.11699)

# Convert lnstreams to original stream values using exp()
original_streams <- exp(lnstreams_values)

# Output the converted stream values
original_streams
###
# Assuming your dataset is named 'raw_data' and the 'streams' column contains the actual number of streams

# Calculate the standard deviation of the number of streams
sd_streams <- sd(raw_data$streams)

# Print the standard deviation
cat("Standard Deviation of Streams: ", sd_streams, "\n")
##################################################################################
####################Extracting Values from Linear Regression  ####################   
##################################################################################
# Step 1: Fit the linear regression model
linear_relationship <- lm(lnstreams ~ song_length, data = raw_data)

# Step 2: View the summary of the linear regression model
regression_summary <- summary(linear_relationship)
print(regression_summary)

# Step 3: Extract the R-squared value
r_squared <- regression_summary$r.squared
cat("R-squared:", r_squared, "\n")

# Step 4: Extract the p-value for the song_length variable
p_value <- regression_summary$coefficients["song_length", "Pr(>|t|)"]
cat("P-value for song_length:", p_value, "\n")





